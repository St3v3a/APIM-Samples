{"docstore/metadata": {"1674374f-0940-4777-b678-920782f45846": {"doc_hash": "72293fe616b3618b605c6df32ee8ba26b77d765ff1e23aa31a6cd1343329dd1c"}, "3e4c1275-dde2-49e7-a1e9-69dcf484d915": {"doc_hash": "8837a944679f5f6dff4d9fefc3fdd01193083224eaee82ef71307410c0731a35"}, "e547def6-263f-467c-8793-de6124d697f5": {"doc_hash": "da6fa5e8c8101acd13c72b534e46ae63bf4d8bc41f36b6ae08b11bcae0f3ddef"}, "cc3982ca-4e80-4399-95a8-59cb4006a3f3": {"doc_hash": "3a1e2bb6c59f6490bfcf7f303a652786118b35f12234980cace5b911c6cef5b8"}, "7250efab-3075-43ee-8bdb-77cfe68f20d2": {"doc_hash": "fd68d949ee3f8304ed555a4b04198a39001a067c7a4762f1c89b885d09d574c2"}, "ec6d5a77-192c-45df-8846-c0cd3efb9ade": {"doc_hash": "a10782a4490e8e432cd42e4812828588d1b4198cd930d3dcc8a763d13421c9a9"}, "cc107856-11a6-4a72-8125-c16f952ead8c": {"doc_hash": "2ea8b986bb0d1d067f9919e499e2a1400182deabce181749cdc2b55bae5df184"}, "2db44c1d-f308-4692-9c38-d79d8828d15b": {"doc_hash": "11fe7324567fa382a1d21e8ee82e7751060ffee6a418ce52e7360b48de881a47"}, "97cbeb2b-ff77-449b-a519-79e36668da8c": {"doc_hash": "d54492104c73851a004a28bb78f917973f4ba7f6f77ade60cc42c3e6116f3e37"}, "2a5ff739-e612-4939-8ea9-1ddd129c379b": {"doc_hash": "1e0b00c46abacfb99ee10758c39144d80c051d337cc9dbe0bfef1edcc6115064"}, "2082bfc3-909f-465e-a2f0-81109611029b": {"doc_hash": "5d7f4ebdd51c44c94d860b36878823fee21a8306c9256f486f3d54e46ab7a592"}, "e07a0b0c-43c4-4fca-bce2-d07723b0ea54": {"doc_hash": "3dc48e7aac46295dcbc8c46ff0addeca146399ffd0b60fb81381ea5ae925668a"}, "0ad3c1fa-e901-4844-9018-89e6662a5932": {"doc_hash": "39345d98f041f5924cafbca4881130132db6b1c030009f942223c3919ad86e61"}, "1d0a46de-e21f-4ad8-9b4d-98b74243c75c": {"doc_hash": "e6f796a45e8bcf643d6d48ca2e2610e15af22618687b193baf9c7e3d2a6c8206"}, "aeb71e26-5201-4019-9a20-9ef09c317fc2": {"doc_hash": "937bc2ed1696e648883989dfa5f2cf798b953bb80a7a53df918503397e47c442"}, "5c4938e2-4a65-4407-85b8-38fc0509482f": {"doc_hash": "40ac24d406e50685542ac56078d8c6bab9f0b13d474ff366ebd43cd9f9012085"}, "a5e480d0-0388-40ba-9a7d-d68baf63b26e": {"doc_hash": "85efc71bcc340b7d66c88ad661d1584432ab6ad90b150d2e6a73ced8cf73f701"}, "374ddb16-7fd0-4f08-be1e-177f9725cb77": {"doc_hash": "269d9f4559adbdcd02db1c02e32f5c30d976ae952d5bf22e75c6ae601ac49ed3"}, "37b2e389-86f9-40a2-8b34-2dc9719651cd": {"doc_hash": "cf9e726e6218943826bb5bdcbe305098b7ca5058ebb7cf4e519d166f4f5da69d"}, "9b39322a-631f-42d1-8a17-85861a7b21d5": {"doc_hash": "e4608cb58faf29f42c32b5e0625c493fff9a3a8a89280e3f6f5db7adedf4ae08"}, "fed8fbb2-dd18-4982-b17f-b0bb801419dd": {"doc_hash": "fdfab2175153f0131bf29c7a9316f2f2d7ce8bdf32ca4f02e8dcc311bf5142b4"}, "2cdb73c4-fc20-4653-bf9c-a21c7e399c78": {"doc_hash": "1782798de782084e2cddad01a9a1f207313ac92cf133e8bc69f29b54993300c9"}, "ee078abb-9963-45f3-bb40-3a7f8d9f8edb": {"doc_hash": "ee79c8f3ef4ee00231fc70c9a631ea1a7c579b39353b119e16ac2b84a6479b76"}, "86fc46ce-bd40-4374-b26b-b98ef5541049": {"doc_hash": "2c82a357fbf2904336c8ad5509b459f65339494c4ee263d502cdc3ed5ccda5c9"}, "54a5f674-0f69-4918-822b-097d32aba65d": {"doc_hash": "96830fa3650c54a505309de54aeb79e1952bd82e366557ed14369d29326565d0"}, "6b94831b-dcff-4435-99e6-f6c48e328a8b": {"doc_hash": "26418f34cd98f630cef88b0d7ca0df3ca4b78f446af08da17b3d19d5ea70891d"}, "67098cad-b6aa-43d6-a6aa-86074f1b5fad": {"doc_hash": "c8980d6c985ede9b3606e4feba97e02a874e4a48d7edb20f2c799a119315dcc0"}, "d705f8bb-571e-4e73-82fc-0336b5f05cad": {"doc_hash": "46c2eb7d5d4deb755acbddbc0ff401ac1df6f7eceb0f776a1c02dfc019eb83a1"}, "9229f68a-7163-4206-842f-cf0067b75d42": {"doc_hash": "5006349f0a597b6c5176dfdd1f97e44841f997830faa5eff9a4263eaa3ee81fc"}, "aa027922-9e49-4745-a228-d5aefb3c0b41": {"doc_hash": "a0dc35e8c30eab1477e44f37d3b4e562246ef55d9f42b355b27d6a218599bd3c"}, "3b515712-b956-4e0c-8f02-0ed3be30ffab": {"doc_hash": "194bcbf9200e8771385c90b480b234a77eab06064ab572140c6d8580e4334e69"}, "dc9d2eec-596b-4786-8124-24e63032471b": {"doc_hash": "674b39d26ef6f8f28288022d959aae1e4b72744d46ef933145ee9581bb308098"}, "c8bf1d4f-28d3-4196-bf81-232d178ac22f": {"doc_hash": "b5af5af52d0431e4c34d44d6ca770170553a9b00247af676389cc10e8a70485c"}, "1b8bd9eb-ca0b-4dcf-a5df-3657141a9dd5": {"doc_hash": "8d0f5828b4f24369fe99bbbc430bd70be850b104186a094f6f698f6df613c156"}, "30f13509-7296-4a60-832b-9f3b314dc912": {"doc_hash": "d0a0f8844e1749e35a388df9f6a31e15b8aa492aaff07593c8156865907dff3a"}, "33869060-4827-4c7e-b53d-2702bff57101": {"doc_hash": "f23e47ec79092de35293eb12e07d532fc67e6acd9e409ddcbf60ecbb349d642c"}, "4c7e3b8c-87bc-4b44-813c-309ce953bbf1": {"doc_hash": "1735d29918e868566a4997d17f31326b76615e9c1568be92dd4bc2e26127e9af"}, "45684114-cf23-4886-b5c7-22f13bcd6469": {"doc_hash": "a3779192da424e67d703a1a9145a5c0aa37c97e25dbb5dfd930def48e4aa0b3c"}, "e2a01043-673c-44d6-9228-f0b9fef868ec": {"doc_hash": "0b20321aa3b4d0935d2e4196112594c0cceda542cc4d7ffe066b6c86d90d9308"}, "a812b0d2-702d-4360-be88-023e2ebf82ef": {"doc_hash": "2a0748ae57eba04949b8dc68b45ebb40abd1369a6017323477f6c4dcd0314891"}, "c6e56574-654d-44a0-b80e-f2cd3cbb6a11": {"doc_hash": "5ba2d687ac2c20803275721b443483c85ea441e3fd2e918cac7c3b3b568d74ba"}, "2c551446-e2cc-4b93-a167-9b0ffc30785f": {"doc_hash": "f189c7eed085ee7458e89a741c6d871cb3dcd414536e6c74225077dab0baf06a"}, "77260ecf-f2f9-4549-92f1-272cc2bdfa95": {"doc_hash": "a2c17b642800397d1855c591160e87908fbd38b2b24813c43748f3570c8d3d8b"}, "d5cc18c8-7ffb-437a-8a99-aa8484c4ec75": {"doc_hash": "32ee4c8dfbe34d04e9bfa173827c3d115418e375bd0c32b1c03c7c8538e3b7c3"}, "c583a1a1-9d56-4184-8960-da91c6564278": {"doc_hash": "e5a40956cebceb9312339cadf6284556d9b1cb30095938b2aee5def21a84bec5"}, "a1157f7e-5b1b-407e-bd78-ef59893341c1": {"doc_hash": "24d037d2aa19cfeab221518c5d53b26170ad3f29395995d5a2c969e61f7fc724"}, "41dc616f-a07a-4b64-bfc2-e8bb7240c327": {"doc_hash": "6ffa599167532d1844ebd8392b4fd966fc8a66736017f13f800ce1f2e23df26a"}, "055f0c9e-8445-4994-8126-7f216ba71b77": {"doc_hash": "3c0c2fc2dadedb9a7aa1ab94a685d62f5db01f2fe7a634e36a0df35dad0c67c0"}, "b3d9ff4e-1142-421e-b15b-9c067ab8ecd9": {"doc_hash": "f6d4af355c9bb685a693e11a07abc284b2ba88ab20f677f1e5353669deff8c52"}, "10174053-2795-4f69-a8d1-db0113ff059b": {"doc_hash": "261043cc8f4e0d6d1dc88dcbf4180cc80757df07d06134a97d0212c75de1f7ba"}, "476e9c87-9b0c-46aa-be85-335f2af59097": {"doc_hash": "874f834986a9c18587e63b2ebed6d43c3134992414a888fa9b5c447d58c34991"}, "9e9711af-632b-4fb7-8de7-475320bdabfb": {"doc_hash": "4dfecd3789f7f2efc6efe22ce6672ea62a6063662fe47950a26f8dc3a8507120"}, "42533994-ab77-4cbf-8989-7f7577c0b0c3": {"doc_hash": "e9200de9eb90cad1cd735344db31c2ee5f54f27f049cf2f120c8ee4ab1911bcd"}, "e74f6ce5-92e6-40ef-b0c5-7ee2aba8267b": {"doc_hash": "bcb2cc847ef07ea47bc280df01ccc31926daa4599e874d3a87de65745c8ba447"}, "f2f4eea9-908a-49e0-93ae-b8d3b406311b": {"doc_hash": "94bb3e151c2ce72ad32ec8ce81a3f76a2ccc4c57947b3d5096e3fa4b7d21b17a"}, "300e85c9-5593-43b9-aaf9-08897f44da9e": {"doc_hash": "fd14b7f3771d791c04346bd6f2ea14673b1047a56cd17ea4a679269e81538002"}, "c1a1d515-d5da-4ee1-abc8-65c31db4d8c5": {"doc_hash": "72293fe616b3618b605c6df32ee8ba26b77d765ff1e23aa31a6cd1343329dd1c", "ref_doc_id": "1674374f-0940-4777-b678-920782f45846"}, "f28807a5-a6c4-428a-ba4b-1ec2a7e54fcd": {"doc_hash": "cd15e3f9f645d7018c270ad919bea908e2e027b69037833f5512a300ec994011", "ref_doc_id": "3e4c1275-dde2-49e7-a1e9-69dcf484d915"}, "2d52a5b8-1d90-4078-997a-38f125632bfe": {"doc_hash": "3b8d05badab20e311b93b0c23ae8a3a7de9ece073000ac598a71419f637f210c", "ref_doc_id": "e547def6-263f-467c-8793-de6124d697f5"}, "2ad13024-de23-4dde-97e3-53876dfc0a0a": {"doc_hash": "b0d0074a2a3a4650bcdcff58b1729d87a91308864f0950b268c9fbdf5d48b2e5", "ref_doc_id": "cc3982ca-4e80-4399-95a8-59cb4006a3f3"}, "a8d03b76-7b31-4fbd-a507-f0578ceeb78b": {"doc_hash": "1117aeed65c5fc37569819e5bd549752c63b579869187c1088811f39d4d5d016", "ref_doc_id": "7250efab-3075-43ee-8bdb-77cfe68f20d2"}, "c6bbc38f-b788-4a8a-adf5-d16264cee2e9": {"doc_hash": "84f12461a9e78bc4b253e734bd94e62b7c391e6216741fc1a76b2a2887916fbf", "ref_doc_id": "ec6d5a77-192c-45df-8846-c0cd3efb9ade"}, "378b5a84-126f-46c8-86c2-28b75ee02cb4": {"doc_hash": "aac1e56f784272b7f5100895b3a842ed33a137ba81c02a5ac0b3cac1f6e48fe5", "ref_doc_id": "cc107856-11a6-4a72-8125-c16f952ead8c"}, "41123dad-b27c-4dc7-bfe6-826826cb4022": {"doc_hash": "1f9cf90f74885db913b3864f6c1aff7f516ffb0defdaaa4f21ac6be5af56b535", "ref_doc_id": "2db44c1d-f308-4692-9c38-d79d8828d15b"}, "05019775-9f6b-4455-b02a-526343a16911": {"doc_hash": "8105994d8e16cbd1aa011abef879bb443d9a449988eb07c4221898f6a761a108", "ref_doc_id": "97cbeb2b-ff77-449b-a519-79e36668da8c"}, "46229f19-3481-46f7-b178-5384951694d2": {"doc_hash": "7aa8ee1815cb9e2c688f419c91344b95b191ebb918d54b39e5cfaa8b0c5fdfd2", "ref_doc_id": "2a5ff739-e612-4939-8ea9-1ddd129c379b"}, "f8b3f6de-f1f8-4ba3-be22-e5d5f9b1c5a5": {"doc_hash": "9cb000eaf1b2736c60af41e42dc291dc786b6cff6af10c87ac9e9ec2468624d2", "ref_doc_id": "2082bfc3-909f-465e-a2f0-81109611029b"}, "78728b6e-a2bd-41d9-8270-5c0f4c9d85c8": {"doc_hash": "2a0334a54a9311a9f69ad650692ffb7cf39e4aefcdbabe11417a462cf029a73e", "ref_doc_id": "e07a0b0c-43c4-4fca-bce2-d07723b0ea54"}, "0ee8cda9-054f-42da-a982-ca4ad844e42e": {"doc_hash": "dd21da08240dcf18961179e62750079ab46472b9a40b4fd070deab2f3e377581", "ref_doc_id": "0ad3c1fa-e901-4844-9018-89e6662a5932"}, "a74fbea6-985d-4d00-8705-07b2d800f093": {"doc_hash": "03f0abfa0b2d09702f626afebfcebed3431ab7a8df93fa3a916025afb4282bc7", "ref_doc_id": "1d0a46de-e21f-4ad8-9b4d-98b74243c75c"}, "6b991117-7355-4c57-a734-f53cc255e75b": {"doc_hash": "a3e10e35db642322db92d82f1f85bc8ba7cc49cc707af33a058c2fbe3c41832a", "ref_doc_id": "aeb71e26-5201-4019-9a20-9ef09c317fc2"}, "7886c727-b151-4dc3-87cc-c4659fa72a1a": {"doc_hash": "7dcc9d758ba7e07919aa71abc0da9b62f71cfc42b8b1c578afca4f7361ec57fb", "ref_doc_id": "5c4938e2-4a65-4407-85b8-38fc0509482f"}, "bd11f6ca-1d4c-46b8-a7e4-742d4d6a9924": {"doc_hash": "b00ebcc2d40a80ef7cd924dd6996c66913b5f7a47ae34f7979ce23317e6010a2", "ref_doc_id": "a5e480d0-0388-40ba-9a7d-d68baf63b26e"}, "c8591049-781f-475d-840f-8de088d4bfee": {"doc_hash": "87f7739a21eba419a3801acae77f29dba60e4fb873ade7c4dd8a53e671aa16b7", "ref_doc_id": "374ddb16-7fd0-4f08-be1e-177f9725cb77"}, "4553df88-f14f-41e1-9455-7864ea2824e0": {"doc_hash": "2aa66f288dfc117b583b812ca68222c6d0cedcb836db2e73d433f1a44f20ee1c", "ref_doc_id": "37b2e389-86f9-40a2-8b34-2dc9719651cd"}, "348d4dd8-2843-4039-9c52-fc46b03ddb00": {"doc_hash": "fbd11569a206e2890aebda1ed73b69974a7269729c5518b9633b43acfcc06e1e", "ref_doc_id": "9b39322a-631f-42d1-8a17-85861a7b21d5"}, "72e6169e-d471-4b69-a76e-0be4303f1b6e": {"doc_hash": "2821e48edfe704ec87965ca511ed551526f4b92f7f4e8c5e2f07c5a543b35092", "ref_doc_id": "fed8fbb2-dd18-4982-b17f-b0bb801419dd"}, "ab9a71b7-d5b1-49ae-a66f-ab674e6e433d": {"doc_hash": "f9d285dccb316e7f9d4bccf6e85ea0249f4fbf280d8ecff344c36e21d4e52572", "ref_doc_id": "2cdb73c4-fc20-4653-bf9c-a21c7e399c78"}, "07f4e333-4af5-4f9d-b3b5-c50d11f12894": {"doc_hash": "e21678a3471bbe5d2a168fbec3212fd36f5d9d8fe9f1fe37a6d8a9c2950d8d55", "ref_doc_id": "ee078abb-9963-45f3-bb40-3a7f8d9f8edb"}, "a2fdd9d6-519e-4c94-9e9d-9b2aaa563da1": {"doc_hash": "cfa1610d15340435f5203f19a9c9284d042eb4e00e19fcb5c61427238adfce06", "ref_doc_id": "86fc46ce-bd40-4374-b26b-b98ef5541049"}, "fc2d9571-9969-465e-9faa-421d650ae88e": {"doc_hash": "e36309ad7becfadd7c23907572dc235643df2527f9610c026d641d27e5ee4641", "ref_doc_id": "54a5f674-0f69-4918-822b-097d32aba65d"}, "31314a15-2b0a-4be9-b73f-cfb5cc8309e1": {"doc_hash": "b26c24c2356daaf52ca8febfc8887901507f310c156e59299df261d129d9bf13", "ref_doc_id": "6b94831b-dcff-4435-99e6-f6c48e328a8b"}, "caf71095-6da1-4a8a-8a67-d0f64169a2ea": {"doc_hash": "3062c47011f98308f92064a1088f0aeb7908241afcc43aa3df1d200b44dc3bc0", "ref_doc_id": "67098cad-b6aa-43d6-a6aa-86074f1b5fad"}, "bfe18b52-88aa-42fd-a8c5-36d5106cb3d6": {"doc_hash": "742ddb449269969b102c5986bd437c80f824dfcbeb7282f097d2c02f95863cbd", "ref_doc_id": "d705f8bb-571e-4e73-82fc-0336b5f05cad"}, "f624fa6e-df3a-44fc-87a7-e9f1bdd45e95": {"doc_hash": "57ee3e5473a7b9afbba864cf8cc8aac4eda96ec757bcd5e7d3112f30bcf93cdf", "ref_doc_id": "9229f68a-7163-4206-842f-cf0067b75d42"}, "57495001-9491-4ad4-877b-127bb912e3c5": {"doc_hash": "2bed13ba79875a9fac65a3053759e555586e77aa5e8b65e66778292639acf33f", "ref_doc_id": "aa027922-9e49-4745-a228-d5aefb3c0b41"}, "76898783-8110-43aa-8f9c-b6ca4c674055": {"doc_hash": "d99afd991220a222bea7348c27ff568740efd61ed0e37aa6cd7a4e426613d462", "ref_doc_id": "3b515712-b956-4e0c-8f02-0ed3be30ffab"}, "5fc85d05-4ac6-48b6-8df0-0d488afcc883": {"doc_hash": "224d079a9c9db27940d55e011ba8949025ebf249e97c882c34ef1f1794fbbaf0", "ref_doc_id": "dc9d2eec-596b-4786-8124-24e63032471b"}, "5869f046-091e-4aad-bbf0-a44868e02903": {"doc_hash": "53d93ed0093cc5e5cfdc333ab2298f91283df260764003af29174aa7122e9ae8", "ref_doc_id": "c8bf1d4f-28d3-4196-bf81-232d178ac22f"}, "daf44cde-bae3-43c6-be94-c997bf4fb0e7": {"doc_hash": "e035d9099d3e91db8cd0f837c9dda0d174d2fbab039259f5669e29ef8ad80219", "ref_doc_id": "1b8bd9eb-ca0b-4dcf-a5df-3657141a9dd5"}, "13229c0d-2f8c-4257-a887-d1e165929438": {"doc_hash": "86095d382e6671e53be4b971b42fa8fcf306af8a5048b034c6548393010ab5c2", "ref_doc_id": "30f13509-7296-4a60-832b-9f3b314dc912"}, "4566c48c-2cec-4107-b118-fc53dd9dfb80": {"doc_hash": "c1f2b2c35d3417ee23cfee0c322926fbf1d9073a901189e291ae308f50601a5d", "ref_doc_id": "33869060-4827-4c7e-b53d-2702bff57101"}, "affa99f4-70ec-4583-b76b-d0062ae839ed": {"doc_hash": "a1d5f5d0fc0b4fadff387179f0c4fccfce145ff4b6c635a25fcc6b5ff90ab4bf", "ref_doc_id": "4c7e3b8c-87bc-4b44-813c-309ce953bbf1"}, "29f72e22-1282-4571-8487-14627f7a864c": {"doc_hash": "64d438d9b8a68096fb99c694bdfbca9f0a926ccecb9a871719ea7353ba8b3dad", "ref_doc_id": "45684114-cf23-4886-b5c7-22f13bcd6469"}, "064c6c2d-7ec8-46c0-a995-3b706b7c6402": {"doc_hash": "ee270b75062ddb5e11ab2f5ff5b7e98a042dbedbcc451e42e6b61637e8f908f7", "ref_doc_id": "e2a01043-673c-44d6-9228-f0b9fef868ec"}, "d160609e-03e5-4ee1-90a0-0f9fb80019b3": {"doc_hash": "eaea8fa294795d4219fc6620779149bc09e1371a507a0bf8fa051cb8c637e1a4", "ref_doc_id": "a812b0d2-702d-4360-be88-023e2ebf82ef"}, "9ea3fa45-571f-4b1e-83ad-8000c7621d6c": {"doc_hash": "236ec5ec79beaaf88793112510b1b27f4681da858f75ffb5ee464d83356640f1", "ref_doc_id": "c6e56574-654d-44a0-b80e-f2cd3cbb6a11"}, "b342d4c6-9a06-4a6b-80de-fe00c010e20e": {"doc_hash": "7dfcf07fc2f6cf514f841e09bbb4cf63ad4cf73005363bd91ef017a859835c0b", "ref_doc_id": "2c551446-e2cc-4b93-a167-9b0ffc30785f"}, "9c3b62bd-0a64-4f4f-997b-7db032c91676": {"doc_hash": "9492e1cbb4eb84f9a77d2589fc3a880c911152d41e0a91b6d5331668d70e66bc", "ref_doc_id": "77260ecf-f2f9-4549-92f1-272cc2bdfa95"}, "6a0799fa-19cb-4716-97bc-e6dc9b557c64": {"doc_hash": "9fedefee6dd63ad91afed228d6dc9bbdcb1f40d684c31e3d1f6559bb5eaf1e9e", "ref_doc_id": "d5cc18c8-7ffb-437a-8a99-aa8484c4ec75"}, "463dddc8-2a6d-427d-bf1a-7114647f0cfb": {"doc_hash": "908d450db732f01d6613ac1fe797e0d845816ea165581e5a38c45a9b28481e2a", "ref_doc_id": "c583a1a1-9d56-4184-8960-da91c6564278"}, "a13280f8-e300-4720-aa38-4a78efe29123": {"doc_hash": "3b29a984b3d8d0c48a7c612a0e34354270ebc624ec32ae7a42e139fa1554759d", "ref_doc_id": "a1157f7e-5b1b-407e-bd78-ef59893341c1"}, "93def712-7f2b-42a5-aff9-8ce6c86b1f21": {"doc_hash": "788fe0e5e6052b578fe672553732d89f54fe2eb9584f33c7361ecca250258171", "ref_doc_id": "41dc616f-a07a-4b64-bfc2-e8bb7240c327"}, "76fbb370-bde6-4af7-9fb1-cb69b70395f2": {"doc_hash": "c7309f0e3ec2f3acdc3bb2fb1596c15c7914a4c5cc52341fd0e39d88e89a4b61", "ref_doc_id": "055f0c9e-8445-4994-8126-7f216ba71b77"}, "60318876-8742-429b-82f7-6ba8ab6e5275": {"doc_hash": "8dbdbbeda45ae73542991126420af8eb1aa8f8c984d21247014270cd88982a13", "ref_doc_id": "b3d9ff4e-1142-421e-b15b-9c067ab8ecd9"}, "b0c6293c-4766-4e07-89b7-b5c5a39b00aa": {"doc_hash": "2bf1c00312f8623e61220fb0e524658f87f8cbb6c0ae80ff53d53ce6ce1b0092", "ref_doc_id": "10174053-2795-4f69-a8d1-db0113ff059b"}, "7f31b1d3-7a3c-4e60-8237-c45500416f64": {"doc_hash": "df19623dc967e0c3a9563100de1e9ab05f3475b824223e52c536acdeb552353d", "ref_doc_id": "476e9c87-9b0c-46aa-be85-335f2af59097"}, "2e55e51c-1927-4e36-9cc0-5fe0ad60dc9c": {"doc_hash": "d35c48ee44cd70b797341cf3a5cf4629f363ac9fe55437de026a972a618fb6e3", "ref_doc_id": "9e9711af-632b-4fb7-8de7-475320bdabfb"}, "555e3201-44d3-4f48-ba9b-d9221303f414": {"doc_hash": "1a22c25842a3fbfac9d4bf742e3ffff005dd0a997362284865b322561199aa8b", "ref_doc_id": "42533994-ab77-4cbf-8989-7f7577c0b0c3"}, "8d8439e0-25af-4d8b-a75d-47935ed0ad13": {"doc_hash": "0395df8c45477089c7ccdd2078cbc7bd1a7c335f3bfd1fb3ee4970c98d3db013", "ref_doc_id": "e74f6ce5-92e6-40ef-b0c5-7ee2aba8267b"}, "dee17cd6-cc98-440f-a24d-3701e3fd8514": {"doc_hash": "850cdc618bb66df895010fa556566076463ea183b5c36679dc882da494dd8790", "ref_doc_id": "f2f4eea9-908a-49e0-93ae-b8d3b406311b"}, "c41ba2f4-0f1d-4c56-9e65-1e2a85766b36": {"doc_hash": "4af814c5326dae5f7b474871c3690c9a4da2dce0f44ae5d7770f35333aa22040", "ref_doc_id": "300e85c9-5593-43b9-aaf9-08897f44da9e"}}, "docstore/data": {"c1a1d515-d5da-4ee1-abc8-65c31db4d8c5": {"__data__": {"id_": "c1a1d515-d5da-4ee1-abc8-65c31db4d8c5", "embedding": null, "metadata": {"page_label": "1", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1674374f-0940-4777-b678-920782f45846", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "72293fe616b3618b605c6df32ee8ba26b77d765ff1e23aa31a6cd1343329dd1c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f28807a5-a6c4-428a-ba4b-1ec2a7e54fcd": {"__data__": {"id_": "f28807a5-a6c4-428a-ba4b-1ec2a7e54fcd", "embedding": null, "metadata": {"page_label": "2", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3e4c1275-dde2-49e7-a1e9-69dcf484d915", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "8837a944679f5f6dff4d9fefc3fdd01193083224eaee82ef71307410c0731a35", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "CONTENTS\n\u00a0\n\u00a0\n1. How will you improve the performance of a program in Python?\n2. What are the benefits of using Python?\n3. How will you specify source code encoding in a Python source file?\n4. What is the use of PEP 8 in Python?\n5. What is Pickling in Python?\n6. How does memory management work in Python?\n7. How will you perform Static Analysis on a Python Script?\n8. What is the difference between a Tuple and List in Python?\n9. What is a Python Decorator?\n10. How are arguments passed in a Python method? By value or by\nreference?\n11. What is the difference between List and Dictionary data types in\nPython?\n12. What are the different built-in data types available in Python?\n13. What is a Namespace in Python?\n14. How will you concatenate multiple strings together in Python?\n15. What is the use of Pass statement in Python?\n16. What is the use of Slicing in Python?\n17. What is the difference between Docstring in Python and Javadoc in\nJava?\n18. How do you perform unit testing for Python code?\n19. What is the difference between an Iterator and Iterable in Python?\n20. What is the use of Generator in Python?", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1113, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2d52a5b8-1d90-4078-997a-38f125632bfe": {"__data__": {"id_": "2d52a5b8-1d90-4078-997a-38f125632bfe", "embedding": null, "metadata": {"page_label": "3", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e547def6-263f-467c-8793-de6124d697f5", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "da6fa5e8c8101acd13c72b534e46ae63bf4d8bc41f36b6ae08b11bcae0f3ddef", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "21. What is the significance of functions that start and end with _\nsymbol in Python?\n22. What is the difference between xrange and range in Python?\n23. What is lambda expression in Python?\n24. How will you copy an object in Python?\n25. What are the main benefits of using Python?\n26. What is a metaclass in Python?\n27. What is the use of frozenset in Python?\n28. What is Python Flask?\n29. What is None in Python?\n30. What is the use of zip() function in Python?\n31. What is the use of // operator in Python?\n32. What is a Module in Python?\n33. How can we create a dictionary with ordered set of keys in Python?\n34. Python is an Object Oriented programming language or a\nfunctional programming language?\n35. How can we retrieve data from a MySQL database in a Python\nscript?\n36. What is the difference between append() and extend() functions of a\nlist in Python?\n37. How will you handle an error condition in Python code?\n38. What is the difference between split() and slicing in Python?\n39. How will you check in Python, if a class is subclass of another class?\n40. How will you debug a piece of code in Python?\n41. How do you profile a Python script?", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1152, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2ad13024-de23-4dde-97e3-53876dfc0a0a": {"__data__": {"id_": "2ad13024-de23-4dde-97e3-53876dfc0a0a", "embedding": null, "metadata": {"page_label": "4", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cc3982ca-4e80-4399-95a8-59cb4006a3f3", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "3a1e2bb6c59f6490bfcf7f303a652786118b35f12234980cace5b911c6cef5b8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "42. What is the difference between \u2018is\u2019 and \u2018==\u2019 in Python?\n43. How will you share variables across modules in Python?\n44. How can we do Functional programming in Python?\n45. What is the improvement in enumerate() function of Python?\n46. How will you execute a Python script in Unix?\n47. What are the popular Python libraries used in Data analysis?\n48. What is the output of following code in Python?\n49. What is the output of following code in Python?\n50. If you have data with name of customers and their location, which\ndata type will you use to store it in Python?\n\u00a0\n \nACKNOWLEDGMENTS\n\u00a0\n\u00a0\nWe thank our readers who constantly send feedback\nand reviews to motivate us in creating these useful\nbooks with the latest information!", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 729, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a8d03b76-7b31-4fbd-a507-f0578ceeb78b": {"__data__": {"id_": "a8d03b76-7b31-4fbd-a507-f0578ceeb78b", "embedding": null, "metadata": {"page_label": "5", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7250efab-3075-43ee-8bdb-77cfe68f20d2", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "fd68d949ee3f8304ed555a4b04198a39001a067c7a4762f1c89b885d09d574c2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "INTRODUCTION\n\u00a0\nThis book contains basic to expert level Python interview questions that an\ninterviewer asks. Each question is accompanied with an answer so that you\ncan prepare for job interview in short time.\nWe have compiled this list after attending dozens of technical interviews in\ntop-notch companies like- Google, Facebook, Netflix, Amazon etc.\nOften, these questions and concepts are used in our daily programming\nwork. But these are most helpful when an Interviewer is trying to test your\ndeep knowledge of Python.\nThe difficulty rating on these Questions varies from a Fresher level\nsoftware programmer to a Senior software programmer.\nOnce you go through them in the first pass, mark the questions that you\ncould not answer by yourself. Then, in second pass go through only the\ndifficult questions.\nAfter going through this book 2-3 times, you will be well prepared to face a\ntechnical interview on Python for an experienced programmer.\n \n\u00a0\nPython Interview Questions", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 978, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c6bbc38f-b788-4a8a-adf5-d16264cee2e9": {"__data__": {"id_": "c6bbc38f-b788-4a8a-adf5-d16264cee2e9", "embedding": null, "metadata": {"page_label": "6", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ec6d5a77-192c-45df-8846-c0cd3efb9ade", "node_type": "4", "metadata": {"page_label": "6", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "a10782a4490e8e432cd42e4812828588d1b4198cd930d3dcc8a763d13421c9a9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1. How will you improve the performance\nof a program in Python?\nThere are many ways to improve the performance of a Python\nprogram. Some of these are as follows:\n\u00a0\ni. Data Structure: We have to select the right data structure\nfor our purpose in a Python program.\nii. Standard Library: Wherever possible, we should use\nmethods from standard library. Methods implemented in\nstandard library have much better performance than user\nimplementation.\niii. Abstraction: At times, a lot of abstraction and\nindirection can cause slow performance of a program.\nWe should remove the redundant abstraction in code.\niv. Algorithm: Use of right algorithm can make a big\ndifference in a program. We have to find and select the\nsuitable algorithm to solve our problem with high\nperformance.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 773, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "378b5a84-126f-46c8-86c2-28b75ee02cb4": {"__data__": {"id_": "378b5a84-126f-46c8-86c2-28b75ee02cb4", "embedding": null, "metadata": {"page_label": "7", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cc107856-11a6-4a72-8125-c16f952ead8c", "node_type": "4", "metadata": {"page_label": "7", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "2ea8b986bb0d1d067f9919e499e2a1400182deabce181749cdc2b55bae5df184", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2. What are the benefits of using Python?\nPython is strong that even Google uses it. Some of the benefits of using\nPython are as follows:\ni. Efficient: Python is very efficient in memory\nmanagement. For a large data set like Big Data, it is much\neasier to program in Python.\nii. Faster: Though Python code is interpreted, still Python\nhas very fast performance.\niii. Wide usage: Python is widely used among different\norganizations for different projects. Due to this wide\nusage, there are thousands of add-ons available for use\nwith Python.\niv. Easy to learn: Python is quite easy to learn. This is the\nbiggest benefit of using Python. Complex tasks can be\nvery easily implemented in Python.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 691, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "41123dad-b27c-4dc7-bfe6-826826cb4022": {"__data__": {"id_": "41123dad-b27c-4dc7-bfe6-826826cb4022", "embedding": null, "metadata": {"page_label": "8", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2db44c1d-f308-4692-9c38-d79d8828d15b", "node_type": "4", "metadata": {"page_label": "8", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "11fe7324567fa382a1d21e8ee82e7751060ffee6a418ce52e7360b48de881a47", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3. How will you specify source code\nencoding in a Python source file?\nBy default, every source code file in Python is in UTF-8 encoding. But we\ncan also specify our own encoding for source files. This can be done by\nadding following line after #! line in the source file.\n# -*- coding: encoding -*-\n\u00a0\nIn the above line we can replace encoding with the encoding that we want\nto use.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 381, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "05019775-9f6b-4455-b02a-526343a16911": {"__data__": {"id_": "05019775-9f6b-4455-b02a-526343a16911", "embedding": null, "metadata": {"page_label": "9", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "97cbeb2b-ff77-449b-a519-79e36668da8c", "node_type": "4", "metadata": {"page_label": "9", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "d54492104c73851a004a28bb78f917973f4ba7f6f77ade60cc42c3e6116f3e37", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4. What is the use of PEP 8 in Python?\n\u00a0\nPEP 8 is a style guide for Python code. This document provides the coding\nconventions for writing code in Python. Coding conventions are about\nindentation, formatting, tabs, maximum line length, imports organization,\nline spacing etc. We use PEP 8 to bring consistency in our code. We\nconsistency it is easier for other developers to read the code.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 389, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "46229f19-3481-46f7-b178-5384951694d2": {"__data__": {"id_": "46229f19-3481-46f7-b178-5384951694d2", "embedding": null, "metadata": {"page_label": "10", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a5ff739-e612-4939-8ea9-1ddd129c379b", "node_type": "4", "metadata": {"page_label": "10", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "1e0b00c46abacfb99ee10758c39144d80c051d337cc9dbe0bfef1edcc6115064", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5. What is Pickling in Python?\n\u00a0\nPickling is a process by which a Python object hierarchy can be converted\ninto a byte stream. The reverse operation of Pickling is Unpickling.\nPython has a module named pickle. This module has the implementation of\na powerful algorithm for serialization and de-serialization of Python object\nstructure.\nSome people also call Pickling as Serialization or Marshalling.\nWith Serialization we can transfer Python objects over the network. It is\nalso used in persisting the state of a Python object. We can write it to a file\nor a database.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 568, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f8b3f6de-f1f8-4ba3-be22-e5d5f9b1c5a5": {"__data__": {"id_": "f8b3f6de-f1f8-4ba3-be22-e5d5f9b1c5a5", "embedding": null, "metadata": {"page_label": "11", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2082bfc3-909f-465e-a2f0-81109611029b", "node_type": "4", "metadata": {"page_label": "11", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "5d7f4ebdd51c44c94d860b36878823fee21a8306c9256f486f3d54e46ab7a592", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "6. How does memory management work in\nPython?\n\u00a0\nThere is a private heap space in Python that contains all the Python objects\nand data structures. In CPython there is a memory manager responsible for\nmanaging the heap space.\nThere are different components in Python memory manager that handle\nsegmentation, sharing, caching, memory pre-allocation etc.\nPython memory manager also takes care of garbage collection by using\nReference counting algorithm.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 449, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "78728b6e-a2bd-41d9-8270-5c0f4c9d85c8": {"__data__": {"id_": "78728b6e-a2bd-41d9-8270-5c0f4c9d85c8", "embedding": null, "metadata": {"page_label": "12", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e07a0b0c-43c4-4fca-bce2-d07723b0ea54", "node_type": "4", "metadata": {"page_label": "12", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "3dc48e7aac46295dcbc8c46ff0addeca146399ffd0b60fb81381ea5ae925668a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "7. How will you perform Static Analysis on\na Python Script?\n\u00a0\nWe can use Static Analysis tool called PyChecker for this purpose.\nPyChecker can detect errors in Python code.\nPyChecker also gives warnings for any style issues.\n\u00a0\nSome other tools to find bugs in Python code are pylint and pyflakes.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 296, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0ee8cda9-054f-42da-a982-ca4ad844e42e": {"__data__": {"id_": "0ee8cda9-054f-42da-a982-ca4ad844e42e", "embedding": null, "metadata": {"page_label": "13", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0ad3c1fa-e901-4844-9018-89e6662a5932", "node_type": "4", "metadata": {"page_label": "13", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "39345d98f041f5924cafbca4881130132db6b1c030009f942223c3919ad86e61", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "8. What is the difference between a Tuple\nand List in Python?\n\u00a0\nIn Python, Tuple and List are built-in data structures.\nSome of the differences between Tuple and List are as follows:\nI. Syntax: A Tuple is enclosed in parentheses:\nE.g. myTuple = (10, 20, \u201capple\u201d);\nA List is enclosed in brackets:\nE.g. myList = [10, 20, 30];\n\u00a0\nII. Mutable: Tuple is an immutable data structure. Whereas, a List is\na mutable data structure.\n\u00a0\nIII. Size: A Tuple takes much lesser space than a List in Python.\n\u00a0\nIV. Performance: Tuple is faster than a List in Python. So it gives us\ngood performance.\n\u00a0\nV. Use case: Since Tuple is immutable, we can use it in cases like\nDictionary creation. Whereas, a List is preferred in the use case\nwhere data can alter.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 737, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a74fbea6-985d-4d00-8705-07b2d800f093": {"__data__": {"id_": "a74fbea6-985d-4d00-8705-07b2d800f093", "embedding": null, "metadata": {"page_label": "14", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1d0a46de-e21f-4ad8-9b4d-98b74243c75c", "node_type": "4", "metadata": {"page_label": "14", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "e6f796a45e8bcf643d6d48ca2e2610e15af22618687b193baf9c7e3d2a6c8206", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "9. What is a Python Decorator?\n\u00a0\nA Python Decorator is a mechanism to wrap a Python function and modify\nits behavior by adding more functionality to it. We can use @ symbol to call\na Python Decorator function.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 209, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6b991117-7355-4c57-a734-f53cc255e75b": {"__data__": {"id_": "6b991117-7355-4c57-a734-f53cc255e75b", "embedding": null, "metadata": {"page_label": "15", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aeb71e26-5201-4019-9a20-9ef09c317fc2", "node_type": "4", "metadata": {"page_label": "15", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "937bc2ed1696e648883989dfa5f2cf798b953bb80a7a53df918503397e47c442", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "10. How are arguments passed in a Python\nmethod? By value or by reference?\n\u00a0\nEvery argument in a Python method is an Object. All the variables in\nPython have reference to an Object. Therefore arguments in Python method\nare passed by Reference.\nSince some of the objects passed as reference are mutable, we can change\nthose objects in a method. But for an Immutable object like String, any\nchange done within a method is not reflected outside.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 442, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7886c727-b151-4dc3-87cc-c4659fa72a1a": {"__data__": {"id_": "7886c727-b151-4dc3-87cc-c4659fa72a1a", "embedding": null, "metadata": {"page_label": "16", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5c4938e2-4a65-4407-85b8-38fc0509482f", "node_type": "4", "metadata": {"page_label": "16", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "40ac24d406e50685542ac56078d8c6bab9f0b13d474ff366ebd43cd9f9012085", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "11. What is the difference between List and\nDictionary data types in Python?\n\u00a0\nMain differences between List and Dictionary data types in Python are as\nfollows:\n\u00a0\nI. Syntax: In a List we store objects in a sequence. In a Dictionary\nwe store objects in key-value pairs.\n\u00a0\nII. Reference: In List we access objects by index number. It starts\nfrom 0 index. In a Dictionary we access objects by key specified at\nthe time of Dictionary creation.\n\u00a0\nIII. Ordering: In a List objects are stored in an ordered sequence. In a\nDictionary objects are not stored in an ordered sequence.\n\u00a0\nIV. Hashing: In a Dictionary, keys have to be hashable. In a List there\nis no need for hashing.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 670, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bd11f6ca-1d4c-46b8-a7e4-742d4d6a9924": {"__data__": {"id_": "bd11f6ca-1d4c-46b8-a7e4-742d4d6a9924", "embedding": null, "metadata": {"page_label": "17", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a5e480d0-0388-40ba-9a7d-d68baf63b26e", "node_type": "4", "metadata": {"page_label": "17", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "85efc71bcc340b7d66c88ad661d1584432ab6ad90b150d2e6a73ced8cf73f701", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "12. What are the different built-in data\ntypes available in Python?\n\u00a0\nSome of the built-in data types available in Python are as follows:\nNumeric types: These are the data types used to represent numbers in\nPython.\nint: It is used for Integers\nlong: It is used for very large integers of non-limited length.\nfloat: It is used for decimal numbers.\ncomplex: This one is for representing complex numbers\nSequence types: These data types are used to represent sequence of\ncharacters or objects.\nstr: This is similar to String in Java. It can represent a sequence of\ncharacters.\nbytes: This is a sequence of integers in the range of 0-255.\nbyte array: like bytes, but mutable (see below); only available in Python 3.x\nlist: This is a sequence of objects.\ntuple: This is a sequence of immutable objects.\nSets: These are unordered collections.\nset: This is a collection of unique objects.\n\u00a0\nfrozen set: This is a collection of unique immutable objects.\nMappings: This is similar to a Map in Java.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 989, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c8591049-781f-475d-840f-8de088d4bfee": {"__data__": {"id_": "c8591049-781f-475d-840f-8de088d4bfee", "embedding": null, "metadata": {"page_label": "18", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "374ddb16-7fd0-4f08-be1e-177f9725cb77", "node_type": "4", "metadata": {"page_label": "18", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "269d9f4559adbdcd02db1c02e32f5c30d976ae952d5bf22e75c6ae601ac49ed3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "dict: This is also called hashmap. It has key value pair to store information\nby using hashing.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 95, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4553df88-f14f-41e1-9455-7864ea2824e0": {"__data__": {"id_": "4553df88-f14f-41e1-9455-7864ea2824e0", "embedding": null, "metadata": {"page_label": "19", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "37b2e389-86f9-40a2-8b34-2dc9719651cd", "node_type": "4", "metadata": {"page_label": "19", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "cf9e726e6218943826bb5bdcbe305098b7ca5058ebb7cf4e519d166f4f5da69d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "13. What is a Namespace in Python?\n\u00a0\nA Namespace in Python is a mapping between a name and an object. It is\ncurrently implemented as Python dictionary.\nE.g. the set of built-in exception names, the set of built-in names, local\nnames in a function\nAt different moments in Python, different Namespaces are created. Each\nNamespace in Python can have a different lifetime.\nFor the list of built-in names, Namespace is created when Python interpreter\nstarts.\nWhen Python interpreter reads the definition of a module, it creates global\nnamespace for that module.\nWhen Python interpreter calls a function, it creates local namespace for that\nfunction.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 644, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "348d4dd8-2843-4039-9c52-fc46b03ddb00": {"__data__": {"id_": "348d4dd8-2843-4039-9c52-fc46b03ddb00", "embedding": null, "metadata": {"page_label": "20", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9b39322a-631f-42d1-8a17-85861a7b21d5", "node_type": "4", "metadata": {"page_label": "20", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "e4608cb58faf29f42c32b5e0625c493fff9a3a8a89280e3f6f5db7adedf4ae08", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "14. How will you concatenate multiple\nstrings together in Python?\n\u00a0\nWe can use following ways to concatenate multiple string together in\nPython:\nI. use + operator:\nE.g.\n>>> fname=\"John\"\n>>> lname=\"Ray\"\n>>> print fname+lname\nJohnRay\nII. use join function:\nE.g.\n>>> ''.join(['John','Ray'])\n'JohnRay'", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 297, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "72e6169e-d471-4b69-a76e-0be4303f1b6e": {"__data__": {"id_": "72e6169e-d471-4b69-a76e-0be4303f1b6e", "embedding": null, "metadata": {"page_label": "21", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fed8fbb2-dd18-4982-b17f-b0bb801419dd", "node_type": "4", "metadata": {"page_label": "21", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "fdfab2175153f0131bf29c7a9316f2f2d7ce8bdf32ca4f02e8dcc311bf5142b4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "15. What is the use of Pass statement in\nPython?\n\u00a0\nThe use of Pass statement is to do nothing. It is just a placeholder for a\nstatement that is required for syntax purpose. It does not execute any code\nor command.\nSome of the use cases for pass statement are as follows:\nI. Syntax purpose:\n>>> while True:\n... pass # Wait till user input is received\nII. Minimal Class: It can be used for creating minimal classes:\n>>> class MyMinimalClass:\n... pass\nIII. Place-holder for TODO work:\nWe can also use it as a placeholder for TODO work on a function or code\nthat needs to be implemented at a later point of time.\n>>> def initialization():\n... pass # TODO", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 650, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ab9a71b7-d5b1-49ae-a66f-ab674e6e433d": {"__data__": {"id_": "ab9a71b7-d5b1-49ae-a66f-ab674e6e433d", "embedding": null, "metadata": {"page_label": "22", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2cdb73c4-fc20-4653-bf9c-a21c7e399c78", "node_type": "4", "metadata": {"page_label": "22", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "1782798de782084e2cddad01a9a1f207313ac92cf133e8bc69f29b54993300c9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "16. What is the use of Slicing in Python?\n\u00a0\nWe can use Slicing in Python to get a substring from a String.\nThe syntax of Slicing is very convenient to use.\nE.g. In following example we are getting a substring out of the name John.\n>>> name=\"John\"\n>>> name[1:3]\n'oh'\nIn Slicing we can give two indices in the String to create a Substring. If we\ndo not give first index, then it defaults to 0.\nE.g.\n>>> name=\"John\"\n>>> name[:2]\n'Jo'\nIf we do not give second index, then it defaults to the size of the String.\n>>> name=\"John\"\n>>> name[3:]\n'n'", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 539, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "07f4e333-4af5-4f9d-b3b5-c50d11f12894": {"__data__": {"id_": "07f4e333-4af5-4f9d-b3b5-c50d11f12894", "embedding": null, "metadata": {"page_label": "23", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ee078abb-9963-45f3-bb40-3a7f8d9f8edb", "node_type": "4", "metadata": {"page_label": "23", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "ee79c8f3ef4ee00231fc70c9a631ea1a7c579b39353b119e16ac2b84a6479b76", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "17. What is the difference between\nDocstring in Python and Javadoc in Java?\n\u00a0\nA Docstring in Python is a string used for adding comments or\nsummarizing a piece of code in Python.\nThe main difference between Javadoc and Docstring is that docstring is\navailable during runtime as well. Whereas, Javadoc is removed from the\nBytecode and it is not present in .class file.\nWe can even use Docstring comments at run time as an interactive help\nmanual.\nIn Python, we have to specify docstring as the first statement of a code\nobject, just after the def or class statement.\nThe docstring for a code object can be accessed from the '__doc__' attribute\nof that object.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 658, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a2fdd9d6-519e-4c94-9e9d-9b2aaa563da1": {"__data__": {"id_": "a2fdd9d6-519e-4c94-9e9d-9b2aaa563da1", "embedding": null, "metadata": {"page_label": "24", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "86fc46ce-bd40-4374-b26b-b98ef5541049", "node_type": "4", "metadata": {"page_label": "24", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "2c82a357fbf2904336c8ad5509b459f65339494c4ee263d502cdc3ed5ccda5c9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "18. How do you perform unit testing for\nPython code?\n\u00a0\nWe can use the unit testing modules unittest or unittest2 to create and run\nunit tests for Python code.\nWe can even do automation of tests with these modules. Some of the main\ncomponents of unittest are as follows:\nI. Test fixture: We use test fixture to create preparation methods\nrequired to run a test. It can even perform post-test cleanup.\n\u00a0\nII. Test case: This is main unit test that we run on a piece of code. We\ncan use Testcase base class to create new test cases.\n\u00a0\nIII. Test suite: We can aggregate our unit test cases in a Test suite.\n\u00a0\nIV. Test runner: We use test runner to execute unit tests and produce\nreports of the test run.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 698, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fc2d9571-9969-465e-9faa-421d650ae88e": {"__data__": {"id_": "fc2d9571-9969-465e-9faa-421d650ae88e", "embedding": null, "metadata": {"page_label": "25", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54a5f674-0f69-4918-822b-097d32aba65d", "node_type": "4", "metadata": {"page_label": "25", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "96830fa3650c54a505309de54aeb79e1952bd82e366557ed14369d29326565d0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "19. What is the difference between an\nIterator and Iterable in Python?\n\u00a0\nAn Iterable is an object that can be iterated by an Iterator.\nIn Python, Iterator object provides _iter_() and next() methods.\nIn Python, an Iterable object has _iter_ function that returns an Iterator\nobject.\n\u00a0\nWhen we work on a map or a for loop in Python, we can use next() method\nto get an Iterable item from the Iterator.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 399, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "31314a15-2b0a-4be9-b73f-cfb5cc8309e1": {"__data__": {"id_": "31314a15-2b0a-4be9-b73f-cfb5cc8309e1", "embedding": null, "metadata": {"page_label": "26", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6b94831b-dcff-4435-99e6-f6c48e328a8b", "node_type": "4", "metadata": {"page_label": "26", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "26418f34cd98f630cef88b0d7ca0df3ca4b78f446af08da17b3d19d5ea70891d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "20. What is the use of Generator in\nPython?\n\u00a0\nWe can use Generator to create Iterators in Python. A Generator is written\nlike a regular function. It can make use yield statement to return data during\nthe function call. In this way we can write complex logic that works as an\nIterator.\nA Generator is more compact than an Iterator due to the fact that _iter_()\nand next() functions are automatically created in a Generator.\nAlso within a Generator code, local variables and execution state are saved\nbetween multiple calls. Therefore, there is no need to add extra variables\nlike self.index etc to keep track of iteration.\nGenerator also increases the readability of the code written in Python. It is a\nvery simple implementation of an Iterator.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 744, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "caf71095-6da1-4a8a-8a67-d0f64169a2ea": {"__data__": {"id_": "caf71095-6da1-4a8a-8a67-d0f64169a2ea", "embedding": null, "metadata": {"page_label": "27", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "67098cad-b6aa-43d6-a6aa-86074f1b5fad", "node_type": "4", "metadata": {"page_label": "27", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "c8980d6c985ede9b3606e4feba97e02a874e4a48d7edb20f2c799a119315dcc0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "21. What is the significance of functions\nthat start and end with _ symbol in\nPython?\n\u00a0\nPython provides many built-in functions that are surrounded by _ symbol at\nthe start and end of the function name. As per Python documentation,\ndouble _ symbol is used for reserved names of functions.\nThese are also known as System-defined names.\nSome of the important functions are:\nObject._ new_\nObject._ init_\nObject._ del_", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 414, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bfe18b52-88aa-42fd-a8c5-36d5106cb3d6": {"__data__": {"id_": "bfe18b52-88aa-42fd-a8c5-36d5106cb3d6", "embedding": null, "metadata": {"page_label": "28", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d705f8bb-571e-4e73-82fc-0336b5f05cad", "node_type": "4", "metadata": {"page_label": "28", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "46c2eb7d5d4deb755acbddbc0ff401ac1df6f7eceb0f776a1c02dfc019eb83a1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "22. What is the difference between xrange\nand range in Python?\n\u00a0\nIn Python, we use range(0,10) to create a list in memory for 10 numbers.\nPython provides another function xrange() that is similar to range() but\nxrange() returns a sequence object instead of list object. In xrange() all the\nvalues are not stored simultaneously in memory. It is a lazy loading based\nfunction.\nBut as per Python documentation, the benefit of xrange() over range() is\nvery minimal in regular scenarios.\nAs of version 3.1, xrange is deprecated.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 523, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f624fa6e-df3a-44fc-87a7-e9f1bdd45e95": {"__data__": {"id_": "f624fa6e-df3a-44fc-87a7-e9f1bdd45e95", "embedding": null, "metadata": {"page_label": "29", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9229f68a-7163-4206-842f-cf0067b75d42", "node_type": "4", "metadata": {"page_label": "29", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "5006349f0a597b6c5176dfdd1f97e44841f997830faa5eff9a4263eaa3ee81fc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "23. What is lambda expression in Python?\n\u00a0\nA lambda expression in Python is used for creating an anonymous function.\nWherever we need a function, we can also use a lambda expression.\nWe have to use lambda keyword for creating a lambda expression. Syntax\nof lambda function is as follows:\nlambda argumentList: expression\nE.g. lambda a,b: a+b\nThe above mentioned lambda expression takes two arguments and returns\ntheir sum.\n\u00a0\nWe can use lambda expression to return a function.\nA lambda expression can be used to pass a function as an argument in\nanother function.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 561, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "57495001-9491-4ad4-877b-127bb912e3c5": {"__data__": {"id_": "57495001-9491-4ad4-877b-127bb912e3c5", "embedding": null, "metadata": {"page_label": "30", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aa027922-9e49-4745-a228-d5aefb3c0b41", "node_type": "4", "metadata": {"page_label": "30", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "a0dc35e8c30eab1477e44f37d3b4e562246ef55d9f42b355b27d6a218599bd3c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "24. How will you copy an object in Python?\n\u00a0\nIn Python we have two options to copy an object. It is similar to cloning an\nobject in Java.\nI. Shallow Copy: To create a shallow copy we call copy.copy(x). In\na shallow copy, Python creates a new compound object based on\nthe original object. And it tries to put references from the original\nobject into copy object.\n\u00a0\nII. Deep Copy: To create a deep copy, we call copy.deepcopy(x). In a\ndeep copy, Python creates a new object and recursively creates and\ninserts copies of the objects from original object into copy object.\nIn a deep copy, we may face the issue of recursive loop due to\ninfinite recursion.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 651, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "76898783-8110-43aa-8f9c-b6ca4c674055": {"__data__": {"id_": "76898783-8110-43aa-8f9c-b6ca4c674055", "embedding": null, "metadata": {"page_label": "31", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3b515712-b956-4e0c-8f02-0ed3be30ffab", "node_type": "4", "metadata": {"page_label": "31", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "194bcbf9200e8771385c90b480b234a77eab06064ab572140c6d8580e4334e69", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "25. What are the main benefits of using\nPython?\n\u00a0\nSome of the main benefits of using Python are as follows:\nI. Easy to learn: Python is simple language. It is easy to learn for a\nnew programmer.\n\u00a0\nII. Large library: There is a large library for utilities in Python that\ncan be used for different kinds of applications.\n\u00a0\nIII. Readability: Python has a variety of statements and expressions\nthat are quite readable and very explicit in their use. It increases\nthe readability of overall code.\n\u00a0\nIV. Memory management: In Python, memory management is built\ninto the Interpreter. So a developer does not have to spend effort on\nmanaging memory among objects.\n\u00a0\nV. Complex built-in Data types: Python has built-in Complex data\ntypes like list, set, dict etc. These data types give very good\nperformance as well as save time in coding new features.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 843, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5fc85d05-4ac6-48b6-8df0-0d488afcc883": {"__data__": {"id_": "5fc85d05-4ac6-48b6-8df0-0d488afcc883", "embedding": null, "metadata": {"page_label": "32", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dc9d2eec-596b-4786-8124-24e63032471b", "node_type": "4", "metadata": {"page_label": "32", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "674b39d26ef6f8f28288022d959aae1e4b72744d46ef933145ee9581bb308098", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "26. What is a metaclass in Python?\n\u00a0\nA metaclass in Python is also known as class of a class. A class defines the\nbehavior of an instance. A metaclass defines the behavior of a class.\nOne of the most common metaclass in Python is type. We can subclass type\nto create our own metaclass.\nWe can use metaclass as a class-factory to create different types of classes.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 363, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5869f046-091e-4aad-bbf0-a44868e02903": {"__data__": {"id_": "5869f046-091e-4aad-bbf0-a44868e02903", "embedding": null, "metadata": {"page_label": "33", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8bf1d4f-28d3-4196-bf81-232d178ac22f", "node_type": "4", "metadata": {"page_label": "33", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "b5af5af52d0431e4c34d44d6ca770170553a9b00247af676389cc10e8a70485c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "27. What is the use of frozenset in Python?\n\u00a0\nA frozenset is a collection of unique values in Python. In addition to all the\nproperties of set, a frozenset is immutable and hashable.\nOnce we have set the values in a frozenset, we cannot change. So we cannot\nuse and update methods from set on frozenset.\nBeing hashable, we can use the objects in frozenset as keys in a Dictionary.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 380, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "daf44cde-bae3-43c6-be94-c997bf4fb0e7": {"__data__": {"id_": "daf44cde-bae3-43c6-be94-c997bf4fb0e7", "embedding": null, "metadata": {"page_label": "34", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1b8bd9eb-ca0b-4dcf-a5df-3657141a9dd5", "node_type": "4", "metadata": {"page_label": "34", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "8d0f5828b4f24369fe99bbbc430bd70be850b104186a094f6f698f6df613c156", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "28. What is Python Flask?\n\u00a0\nPython Flask is a micro-framework based on Python to develop a web\napplication.\nIt is a very simple application framework that has many extensions to build\nan enterprise level application.\nFlask does not provide a data abstraction layer or form validation by\ndefault. We can use external libraries on top of Flask to perform such tasks.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 364, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "13229c0d-2f8c-4257-a887-d1e165929438": {"__data__": {"id_": "13229c0d-2f8c-4257-a887-d1e165929438", "embedding": null, "metadata": {"page_label": "35", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "30f13509-7296-4a60-832b-9f3b314dc912", "node_type": "4", "metadata": {"page_label": "35", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "d0a0f8844e1749e35a388df9f6a31e15b8aa492aaff07593c8156865907dff3a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "29. What is None in Python?\n\u00a0\nNone is a reserved keyword used in Python for null objects. It is neither a\nnull value nor a null pointer. It is an actual object in Python. But there is\nonly one instance of None in a Python environment.\nWe can use None as a default argument in a function.\nDuring comparison we have to use \u201cis\u201d operator instead of \u201c==\u201d for None.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 360, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4566c48c-2cec-4107-b118-fc53dd9dfb80": {"__data__": {"id_": "4566c48c-2cec-4107-b118-fc53dd9dfb80", "embedding": null, "metadata": {"page_label": "36", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "33869060-4827-4c7e-b53d-2702bff57101", "node_type": "4", "metadata": {"page_label": "36", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "f23e47ec79092de35293eb12e07d532fc67e6acd9e409ddcbf60ecbb349d642c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "30. What is the use of zip() function in\nPython?\n\u00a0\nIn Python, we have a built-in function zip() that can be used to aggregate all\nthe Iterable objects of an Iterator.\nWe can use it to aggregate Iterable objects from two iterators as well.\nE.g.\nlist_1 = ['a', 'b', 'c']\nlist_2 = ['1', '2', '3']\nfor a, b in zip(list_1, list_2):\nprint a, b\n\u00a0\nOutput:\na1\nb2\nc3\n\u00a0\nBy using zip() function we can divide our input data from different sources\ninto fixed number of sets.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 461, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "affa99f4-70ec-4583-b76b-d0062ae839ed": {"__data__": {"id_": "affa99f4-70ec-4583-b76b-d0062ae839ed", "embedding": null, "metadata": {"page_label": "37", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4c7e3b8c-87bc-4b44-813c-309ce953bbf1", "node_type": "4", "metadata": {"page_label": "37", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "1735d29918e868566a4997d17f31326b76615e9c1568be92dd4bc2e26127e9af", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "31. What is the use of // operator in\nPython?\n\u00a0\nPython provides // operator to perform floor division of a number by\nanother. The result of // operator is a whole number (without decimal part)\nquotient that we get by dividing left number with right number.\nIt can also be used floordiv(a,b).\nE.g.\n10// 4 = 2\n-10//4 = -3", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 319, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "29f72e22-1282-4571-8487-14627f7a864c": {"__data__": {"id_": "29f72e22-1282-4571-8487-14627f7a864c", "embedding": null, "metadata": {"page_label": "38", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "45684114-cf23-4886-b5c7-22f13bcd6469", "node_type": "4", "metadata": {"page_label": "38", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "a3779192da424e67d703a1a9145a5c0aa37c97e25dbb5dfd930def48e4aa0b3c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "32. What is a Module in Python?\n\u00a0\nA Module is a script written in Python with import statements, classes,\nfunctions etc. We can use a module in another Python script by importing it\nor by giving the complete namespace.\nWith Modules, we can divide the functionality of our application in smaller\nchunks that can be easily managed.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 329, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "064c6c2d-7ec8-46c0-a995-3b706b7c6402": {"__data__": {"id_": "064c6c2d-7ec8-46c0-a995-3b706b7c6402", "embedding": null, "metadata": {"page_label": "39", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e2a01043-673c-44d6-9228-f0b9fef868ec", "node_type": "4", "metadata": {"page_label": "39", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "0b20321aa3b4d0935d2e4196112594c0cceda542cc4d7ffe066b6c86d90d9308", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "33. How can we create a dictionary with\nordered set of keys in Python?\n\u00a0\nIn a normal dictionary in Python, there is no order maintained between\nkeys. To solve this problem, we can use OrderDict class in Python. This\nclass is available for use since version 2.7.\nIt is similar to a dictionary in Python, but it maintains the insertion order of\nkeys in the dictionary collection.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 377, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d160609e-03e5-4ee1-90a0-0f9fb80019b3": {"__data__": {"id_": "d160609e-03e5-4ee1-90a0-0f9fb80019b3", "embedding": null, "metadata": {"page_label": "40", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a812b0d2-702d-4360-be88-023e2ebf82ef", "node_type": "4", "metadata": {"page_label": "40", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "2a0748ae57eba04949b8dc68b45ebb40abd1369a6017323477f6c4dcd0314891", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "34. Python is an Object Oriented\nprogramming language or a functional\nprogramming language?\n\u00a0\nPython uses most of the Object Oriented programming concepts. But we\ncan also do functional programming in Python. As per the opinion of\nexperts, Python is a multi-paradigm programming language.\nWe can do functional, procedural, object-oriented and imperative\nprogramming with the help of Python.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 390, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9ea3fa45-571f-4b1e-83ad-8000c7621d6c": {"__data__": {"id_": "9ea3fa45-571f-4b1e-83ad-8000c7621d6c", "embedding": null, "metadata": {"page_label": "41", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c6e56574-654d-44a0-b80e-f2cd3cbb6a11", "node_type": "4", "metadata": {"page_label": "41", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "5ba2d687ac2c20803275721b443483c85ea441e3fd2e918cac7c3b3b568d74ba", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "35. How can we retrieve data from a\nMySQL database in a Python script?\n\u00a0\nTo retrieve data from a database we have to make use of the module\navailable for that database. For MySQL database, we import MySQLdb\nmodule in our Python script.\nWe have to first connect to a specific database by passing URL, username,\npassword and the name of database.\nOnce we establish the connection, we can open a cursor with cursor()\nfunction. On an open cursor, we can run fetch() function to execute queries\nand retrieve data from the database tables.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 533, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b342d4c6-9a06-4a6b-80de-fe00c010e20e": {"__data__": {"id_": "b342d4c6-9a06-4a6b-80de-fe00c010e20e", "embedding": null, "metadata": {"page_label": "42", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2c551446-e2cc-4b93-a167-9b0ffc30785f", "node_type": "4", "metadata": {"page_label": "42", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "f189c7eed085ee7458e89a741c6d871cb3dcd414536e6c74225077dab0baf06a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "36. What is the difference between\nappend() and extend() functions of a list in\nPython?\n\u00a0\nIn Python, we get a built-in sequence called list. We can call standard\nfunctions like append() and extend() on a list.\nWe call append() method to add an item to the end of a list.\nWe call extend() method to add another list to the end of a list.\nIn append() we have to add items one by one. But in extend() multiple items\nfrom another list can be added at the same time.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 461, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9c3b62bd-0a64-4f4f-997b-7db032c91676": {"__data__": {"id_": "9c3b62bd-0a64-4f4f-997b-7db032c91676", "embedding": null, "metadata": {"page_label": "43", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "77260ecf-f2f9-4549-92f1-272cc2bdfa95", "node_type": "4", "metadata": {"page_label": "43", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "a2c17b642800397d1855c591160e87908fbd38b2b24813c43748f3570c8d3d8b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "37. How will you handle an error condition\nin Python code?\n\u00a0\nWe can implement exception handling to handle error conditions in Python\ncode. If we are expecting an error condition that we cannot handle, we can\nraise an error with appropriate message.\nE.g.\n>>> if student_score < 0: raise ValueError(\u201cScore can not be negative\u201d)\n\u00a0\nIf we do not want to stop the program, we can just catch the error condition,\nprint a message and continue with our program.\n\u00a0\nE.g. In following code snippet we are catching the error and continuing\nwith the default value of age.\n\u00a0\n#!/usr/bin/python\ntry:\nage=18+'duration'\nexcept:\nprint(\"duration has to be a number\")\nage=18\nprint(age)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 664, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6a0799fa-19cb-4716-97bc-e6dc9b557c64": {"__data__": {"id_": "6a0799fa-19cb-4716-97bc-e6dc9b557c64", "embedding": null, "metadata": {"page_label": "44", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d5cc18c8-7ffb-437a-8a99-aa8484c4ec75", "node_type": "4", "metadata": {"page_label": "44", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "32ee4c8dfbe34d04e9bfa173827c3d115418e375bd0c32b1c03c7c8538e3b7c3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "38. What is the difference between split()\nand slicing in Python?\n\u00a0\nBoth split() function and slicing work on a String object. By using split()\nfunction, we can get the list of words from a String.\nE.g. 'a b c '.split() returns [\u2018a\u2019, \u2018b\u2019, \u2018c\u2019]\nSlicing is a way of getting substring from a String. It returns another String.\nE.g. >>> 'a b c'[2:3] returns b", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 355, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "463dddc8-2a6d-427d-bf1a-7114647f0cfb": {"__data__": {"id_": "463dddc8-2a6d-427d-bf1a-7114647f0cfb", "embedding": null, "metadata": {"page_label": "45", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c583a1a1-9d56-4184-8960-da91c6564278", "node_type": "4", "metadata": {"page_label": "45", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "e5a40956cebceb9312339cadf6284556d9b1cb30095938b2aee5def21a84bec5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "39. How will you check in Python, if a class\nis subclass of another class?\n\u00a0\nPython provides a useful method issubclass(a,b) to check whether class a is\na subclass of b.\nE.g. int is not a subclass of long\n>>> issubclass(int,long)\nFalse\nbool is a subclass of int\n>>> issubclass(bool,int)\nTrue", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 291, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a13280f8-e300-4720-aa38-4a78efe29123": {"__data__": {"id_": "a13280f8-e300-4720-aa38-4a78efe29123", "embedding": null, "metadata": {"page_label": "46", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a1157f7e-5b1b-407e-bd78-ef59893341c1", "node_type": "4", "metadata": {"page_label": "46", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "24d037d2aa19cfeab221518c5d53b26170ad3f29395995d5a2c969e61f7fc724", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "40. How will you debug a piece of code in\nPython?\n\u00a0\nIn Python, we can use the debugger pdb for debugging the code. To start\ndebugging we have to enter following lines on the top of a Python script.\nimport pdb\npdb.set_trace()\nAfter adding these lines, our code runs in debug mode. Now we can use\ncommands like breakpoint, step through, step into etc for debugging.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 363, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "93def712-7f2b-42a5-aff9-8ce6c86b1f21": {"__data__": {"id_": "93def712-7f2b-42a5-aff9-8ce6c86b1f21", "embedding": null, "metadata": {"page_label": "47", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "41dc616f-a07a-4b64-bfc2-e8bb7240c327", "node_type": "4", "metadata": {"page_label": "47", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "6ffa599167532d1844ebd8392b4fd966fc8a66736017f13f800ce1f2e23df26a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "41. How do you profile a Python script?\n\u00a0\nPython provides a profiler called cProfile that can be used for profiling\nPython code.\nWe can call it from our code as well as from the interpreter.\nIt gives use the number of function calls as well as the total time taken to\nrun the script.\nWe can even write the profile results to a file instead of standard out.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 356, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "76fbb370-bde6-4af7-9fb1-cb69b70395f2": {"__data__": {"id_": "76fbb370-bde6-4af7-9fb1-cb69b70395f2", "embedding": null, "metadata": {"page_label": "48", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "055f0c9e-8445-4994-8126-7f216ba71b77", "node_type": "4", "metadata": {"page_label": "48", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "3c0c2fc2dadedb9a7aa1ab94a685d62f5db01f2fe7a634e36a0df35dad0c67c0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "42. What is the difference between \u2018is\u2019 and\n\u2018==\u2019 in Python?\n\u00a0\nWe use \u2018is\u2019 to check an object against its identity.\nWe use \u2018==\u2019 to check equality of two objects.\n\u00a0\nE.g.\n>>> lst = [10,20, 20]\n>>> lst == lst[:]\nTrue\n>>> lst is lst[:]\nFalse", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 236, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "60318876-8742-429b-82f7-6ba8ab6e5275": {"__data__": {"id_": "60318876-8742-429b-82f7-6ba8ab6e5275", "embedding": null, "metadata": {"page_label": "49", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b3d9ff4e-1142-421e-b15b-9c067ab8ecd9", "node_type": "4", "metadata": {"page_label": "49", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "f6d4af355c9bb685a693e11a07abc284b2ba88ab20f677f1e5353669deff8c52", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "43. How will you share variables across\nmodules in Python?\n\u00a0\nWe can create a common module with variables that we want to share.\nThis common module can be imported in all the modules in which we want\nto share the variables.\nIn this way, all the shared variables will be in one module and available for\nsharing with any new module as well.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 338, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b0c6293c-4766-4e07-89b7-b5c5a39b00aa": {"__data__": {"id_": "b0c6293c-4766-4e07-89b7-b5c5a39b00aa", "embedding": null, "metadata": {"page_label": "50", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "10174053-2795-4f69-a8d1-db0113ff059b", "node_type": "4", "metadata": {"page_label": "50", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "261043cc8f4e0d6d1dc88dcbf4180cc80757df07d06134a97d0212c75de1f7ba", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "44. How can we do Functional\nprogramming in Python?\n\u00a0\nIn Functional Programming, we decompose a program into functions. These\nfunctions take input and after processing give an output. The function does\nnot maintain any state.\nPython provides built-in functions that can be used for Functional\nprogramming. Some of these functions are:\nI. Map()\nII. reduce()\nIII. filter()\nEvent iterators and generators can be used for Functional programming in\nPython.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 451, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7f31b1d3-7a3c-4e60-8237-c45500416f64": {"__data__": {"id_": "7f31b1d3-7a3c-4e60-8237-c45500416f64", "embedding": null, "metadata": {"page_label": "51", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "476e9c87-9b0c-46aa-be85-335f2af59097", "node_type": "4", "metadata": {"page_label": "51", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "874f834986a9c18587e63b2ebed6d43c3134992414a888fa9b5c447d58c34991", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "45. What is the improvement in\nenumerate() function of Python?\n\u00a0\nIn Python, enumerate() function is an improvement over regular iteration.\nThe enumerate() function returns an iterator that gives (0, item[0]).\nE.g.\n>>> thelist=['a','b']\n>>> for i,j in enumerate(thelist):\n... print i,j\n...\n0 a\n1 b", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 296, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2e55e51c-1927-4e36-9cc0-5fe0ad60dc9c": {"__data__": {"id_": "2e55e51c-1927-4e36-9cc0-5fe0ad60dc9c", "embedding": null, "metadata": {"page_label": "52", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9e9711af-632b-4fb7-8de7-475320bdabfb", "node_type": "4", "metadata": {"page_label": "52", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "4dfecd3789f7f2efc6efe22ce6672ea62a6063662fe47950a26f8dc3a8507120", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "46. How will you execute a Python script in\nUnix?\n\u00a0\nTo execute a Python script in Unix, we need to have Python executor in\nUnix environment.\nIn addition to that we have to add following line as the first line in a Python\nscript file.\n#!/usr/local/bin/python\n\u00a0\nThis will tell Unix to use Python interpreter to execute the script.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 328, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "555e3201-44d3-4f48-ba9b-d9221303f414": {"__data__": {"id_": "555e3201-44d3-4f48-ba9b-d9221303f414", "embedding": null, "metadata": {"page_label": "53", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "42533994-ab77-4cbf-8989-7f7577c0b0c3", "node_type": "4", "metadata": {"page_label": "53", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "e9200de9eb90cad1cd735344db31c2ee5f54f27f049cf2f120c8ee4ab1911bcd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "47. What are the popular Python libraries\nused in Data analysis?\n\u00a0\nSome of the popular libraries of Python used for Data analysis are:\nI. Pandas: Powerful Python Data Analysis Toolkit\nII. SciKit: This is a machine learning library in Python.\nIII. Seaborn: This is a statistical data visualization library in Python.\nIV. SciPy: This is an open source system for science, mathematics and\nengineering implemented in Python.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 420, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8d8439e0-25af-4d8b-a75d-47935ed0ad13": {"__data__": {"id_": "8d8439e0-25af-4d8b-a75d-47935ed0ad13", "embedding": null, "metadata": {"page_label": "54", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e74f6ce5-92e6-40ef-b0c5-7ee2aba8267b", "node_type": "4", "metadata": {"page_label": "54", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "bcb2cc847ef07ea47bc280df01ccc31926daa4599e874d3a87de65745c8ba447", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "48. What is the output of following code in\nPython?\n\u00a0\n>>> thelist=['a','b']\n>>> print thelist[3:]\nAns: The output of this code is following:\n[]\nEven though the list has only 2 elements, the call to thelist with index 3\ndoes not give any index error.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 249, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dee17cd6-cc98-440f-a24d-3701e3fd8514": {"__data__": {"id_": "dee17cd6-cc98-440f-a24d-3701e3fd8514", "embedding": null, "metadata": {"page_label": "55", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2f4eea9-908a-49e0-93ae-b8d3b406311b", "node_type": "4", "metadata": {"page_label": "55", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "94bb3e151c2ce72ad32ec8ce81a3f76a2ccc4c57947b3d5096e3fa4b7d21b17a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "49. What is the output of following code in\nPython?\n\u00a0\n>>>name=\u2019John Smith\u2019\n>>>print name[:5] + name[5:]\nAns: Output of this will be\nJohn Smith\nThis is an example of Slicing. Since we are slicing at the same index, the\nfirst name[:5] gives the substring name upto 5th location excluding 5th\nlocation. The name[5:] gives the rest of the substring of name from the 5th\nlocation. So we get the full name as output.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 410, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c41ba2f4-0f1d-4c56-9e65-1e2a85766b36": {"__data__": {"id_": "c41ba2f4-0f1d-4c56-9e65-1e2a85766b36", "embedding": null, "metadata": {"page_label": "56", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "300e85c9-5593-43b9-aaf9-08897f44da9e", "node_type": "4", "metadata": {"page_label": "56", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}, "hash": "fd14b7f3771d791c04346bd6f2ea14673b1047a56cd17ea4a679269e81538002", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "50. If you have data with name of\ncustomers and their location, which data\ntype will you use to store it in Python?\n\u00a0\nIn Python, we can use dict data type to store key value pairs. In this\nexample, customer name can be the key and their location can be the value\nin a dict data type.\nDictionary is an efficient way to store data that can be looked up based on a\nkey.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 366, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"1674374f-0940-4777-b678-920782f45846": {"node_ids": ["c1a1d515-d5da-4ee1-abc8-65c31db4d8c5"], "metadata": {"page_label": "1", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "3e4c1275-dde2-49e7-a1e9-69dcf484d915": {"node_ids": ["f28807a5-a6c4-428a-ba4b-1ec2a7e54fcd"], "metadata": {"page_label": "2", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "e547def6-263f-467c-8793-de6124d697f5": {"node_ids": ["2d52a5b8-1d90-4078-997a-38f125632bfe"], "metadata": {"page_label": "3", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "cc3982ca-4e80-4399-95a8-59cb4006a3f3": {"node_ids": ["2ad13024-de23-4dde-97e3-53876dfc0a0a"], "metadata": {"page_label": "4", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "7250efab-3075-43ee-8bdb-77cfe68f20d2": {"node_ids": ["a8d03b76-7b31-4fbd-a507-f0578ceeb78b"], "metadata": {"page_label": "5", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "ec6d5a77-192c-45df-8846-c0cd3efb9ade": {"node_ids": ["c6bbc38f-b788-4a8a-adf5-d16264cee2e9"], "metadata": {"page_label": "6", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "cc107856-11a6-4a72-8125-c16f952ead8c": {"node_ids": ["378b5a84-126f-46c8-86c2-28b75ee02cb4"], "metadata": {"page_label": "7", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "2db44c1d-f308-4692-9c38-d79d8828d15b": {"node_ids": ["41123dad-b27c-4dc7-bfe6-826826cb4022"], "metadata": {"page_label": "8", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "97cbeb2b-ff77-449b-a519-79e36668da8c": {"node_ids": ["05019775-9f6b-4455-b02a-526343a16911"], "metadata": {"page_label": "9", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "2a5ff739-e612-4939-8ea9-1ddd129c379b": {"node_ids": ["46229f19-3481-46f7-b178-5384951694d2"], "metadata": {"page_label": "10", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "2082bfc3-909f-465e-a2f0-81109611029b": {"node_ids": ["f8b3f6de-f1f8-4ba3-be22-e5d5f9b1c5a5"], "metadata": {"page_label": "11", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "e07a0b0c-43c4-4fca-bce2-d07723b0ea54": {"node_ids": ["78728b6e-a2bd-41d9-8270-5c0f4c9d85c8"], "metadata": {"page_label": "12", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "0ad3c1fa-e901-4844-9018-89e6662a5932": {"node_ids": ["0ee8cda9-054f-42da-a982-ca4ad844e42e"], "metadata": {"page_label": "13", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "1d0a46de-e21f-4ad8-9b4d-98b74243c75c": {"node_ids": ["a74fbea6-985d-4d00-8705-07b2d800f093"], "metadata": {"page_label": "14", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "aeb71e26-5201-4019-9a20-9ef09c317fc2": {"node_ids": ["6b991117-7355-4c57-a734-f53cc255e75b"], "metadata": {"page_label": "15", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "5c4938e2-4a65-4407-85b8-38fc0509482f": {"node_ids": ["7886c727-b151-4dc3-87cc-c4659fa72a1a"], "metadata": {"page_label": "16", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "a5e480d0-0388-40ba-9a7d-d68baf63b26e": {"node_ids": ["bd11f6ca-1d4c-46b8-a7e4-742d4d6a9924"], "metadata": {"page_label": "17", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "374ddb16-7fd0-4f08-be1e-177f9725cb77": {"node_ids": ["c8591049-781f-475d-840f-8de088d4bfee"], "metadata": {"page_label": "18", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "37b2e389-86f9-40a2-8b34-2dc9719651cd": {"node_ids": ["4553df88-f14f-41e1-9455-7864ea2824e0"], "metadata": {"page_label": "19", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "9b39322a-631f-42d1-8a17-85861a7b21d5": {"node_ids": ["348d4dd8-2843-4039-9c52-fc46b03ddb00"], "metadata": {"page_label": "20", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "fed8fbb2-dd18-4982-b17f-b0bb801419dd": {"node_ids": ["72e6169e-d471-4b69-a76e-0be4303f1b6e"], "metadata": {"page_label": "21", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "2cdb73c4-fc20-4653-bf9c-a21c7e399c78": {"node_ids": ["ab9a71b7-d5b1-49ae-a66f-ab674e6e433d"], "metadata": {"page_label": "22", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "ee078abb-9963-45f3-bb40-3a7f8d9f8edb": {"node_ids": ["07f4e333-4af5-4f9d-b3b5-c50d11f12894"], "metadata": {"page_label": "23", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "86fc46ce-bd40-4374-b26b-b98ef5541049": {"node_ids": ["a2fdd9d6-519e-4c94-9e9d-9b2aaa563da1"], "metadata": {"page_label": "24", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "54a5f674-0f69-4918-822b-097d32aba65d": {"node_ids": ["fc2d9571-9969-465e-9faa-421d650ae88e"], "metadata": {"page_label": "25", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "6b94831b-dcff-4435-99e6-f6c48e328a8b": {"node_ids": ["31314a15-2b0a-4be9-b73f-cfb5cc8309e1"], "metadata": {"page_label": "26", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "67098cad-b6aa-43d6-a6aa-86074f1b5fad": {"node_ids": ["caf71095-6da1-4a8a-8a67-d0f64169a2ea"], "metadata": {"page_label": "27", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "d705f8bb-571e-4e73-82fc-0336b5f05cad": {"node_ids": ["bfe18b52-88aa-42fd-a8c5-36d5106cb3d6"], "metadata": {"page_label": "28", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "9229f68a-7163-4206-842f-cf0067b75d42": {"node_ids": ["f624fa6e-df3a-44fc-87a7-e9f1bdd45e95"], "metadata": {"page_label": "29", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "aa027922-9e49-4745-a228-d5aefb3c0b41": {"node_ids": ["57495001-9491-4ad4-877b-127bb912e3c5"], "metadata": {"page_label": "30", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "3b515712-b956-4e0c-8f02-0ed3be30ffab": {"node_ids": ["76898783-8110-43aa-8f9c-b6ca4c674055"], "metadata": {"page_label": "31", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "dc9d2eec-596b-4786-8124-24e63032471b": {"node_ids": ["5fc85d05-4ac6-48b6-8df0-0d488afcc883"], "metadata": {"page_label": "32", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "c8bf1d4f-28d3-4196-bf81-232d178ac22f": {"node_ids": ["5869f046-091e-4aad-bbf0-a44868e02903"], "metadata": {"page_label": "33", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "1b8bd9eb-ca0b-4dcf-a5df-3657141a9dd5": {"node_ids": ["daf44cde-bae3-43c6-be94-c997bf4fb0e7"], "metadata": {"page_label": "34", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "30f13509-7296-4a60-832b-9f3b314dc912": {"node_ids": ["13229c0d-2f8c-4257-a887-d1e165929438"], "metadata": {"page_label": "35", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "33869060-4827-4c7e-b53d-2702bff57101": {"node_ids": ["4566c48c-2cec-4107-b118-fc53dd9dfb80"], "metadata": {"page_label": "36", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "4c7e3b8c-87bc-4b44-813c-309ce953bbf1": {"node_ids": ["affa99f4-70ec-4583-b76b-d0062ae839ed"], "metadata": {"page_label": "37", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "45684114-cf23-4886-b5c7-22f13bcd6469": {"node_ids": ["29f72e22-1282-4571-8487-14627f7a864c"], "metadata": {"page_label": "38", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "e2a01043-673c-44d6-9228-f0b9fef868ec": {"node_ids": ["064c6c2d-7ec8-46c0-a995-3b706b7c6402"], "metadata": {"page_label": "39", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "a812b0d2-702d-4360-be88-023e2ebf82ef": {"node_ids": ["d160609e-03e5-4ee1-90a0-0f9fb80019b3"], "metadata": {"page_label": "40", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "c6e56574-654d-44a0-b80e-f2cd3cbb6a11": {"node_ids": ["9ea3fa45-571f-4b1e-83ad-8000c7621d6c"], "metadata": {"page_label": "41", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "2c551446-e2cc-4b93-a167-9b0ffc30785f": {"node_ids": ["b342d4c6-9a06-4a6b-80de-fe00c010e20e"], "metadata": {"page_label": "42", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "77260ecf-f2f9-4549-92f1-272cc2bdfa95": {"node_ids": ["9c3b62bd-0a64-4f4f-997b-7db032c91676"], "metadata": {"page_label": "43", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "d5cc18c8-7ffb-437a-8a99-aa8484c4ec75": {"node_ids": ["6a0799fa-19cb-4716-97bc-e6dc9b557c64"], "metadata": {"page_label": "44", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "c583a1a1-9d56-4184-8960-da91c6564278": {"node_ids": ["463dddc8-2a6d-427d-bf1a-7114647f0cfb"], "metadata": {"page_label": "45", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "a1157f7e-5b1b-407e-bd78-ef59893341c1": {"node_ids": ["a13280f8-e300-4720-aa38-4a78efe29123"], "metadata": {"page_label": "46", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "41dc616f-a07a-4b64-bfc2-e8bb7240c327": {"node_ids": ["93def712-7f2b-42a5-aff9-8ce6c86b1f21"], "metadata": {"page_label": "47", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "055f0c9e-8445-4994-8126-7f216ba71b77": {"node_ids": ["76fbb370-bde6-4af7-9fb1-cb69b70395f2"], "metadata": {"page_label": "48", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "b3d9ff4e-1142-421e-b15b-9c067ab8ecd9": {"node_ids": ["60318876-8742-429b-82f7-6ba8ab6e5275"], "metadata": {"page_label": "49", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "10174053-2795-4f69-a8d1-db0113ff059b": {"node_ids": ["b0c6293c-4766-4e07-89b7-b5c5a39b00aa"], "metadata": {"page_label": "50", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "476e9c87-9b0c-46aa-be85-335f2af59097": {"node_ids": ["7f31b1d3-7a3c-4e60-8237-c45500416f64"], "metadata": {"page_label": "51", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "9e9711af-632b-4fb7-8de7-475320bdabfb": {"node_ids": ["2e55e51c-1927-4e36-9cc0-5fe0ad60dc9c"], "metadata": {"page_label": "52", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "42533994-ab77-4cbf-8989-7f7577c0b0c3": {"node_ids": ["555e3201-44d3-4f48-ba9b-d9221303f414"], "metadata": {"page_label": "53", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "e74f6ce5-92e6-40ef-b0c5-7ee2aba8267b": {"node_ids": ["8d8439e0-25af-4d8b-a75d-47935ed0ad13"], "metadata": {"page_label": "54", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "f2f4eea9-908a-49e0-93ae-b8d3b406311b": {"node_ids": ["dee17cd6-cc98-440f-a24d-3701e3fd8514"], "metadata": {"page_label": "55", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}, "300e85c9-5593-43b9-aaf9-08897f44da9e": {"node_ids": ["c41ba2f4-0f1d-4c56-9e65-1e2a85766b36"], "metadata": {"page_label": "56", "file_name": "Python-Tips.pdf", "file_path": "Z:\\U-DEV\\APIM-Code-Samples\\APIM-Samples\\lindex\\data\\Python-Tips.pdf", "file_type": "application/pdf", "file_size": 265983, "creation_date": "2025-02-19", "last_modified_date": "2025-01-27"}}}}